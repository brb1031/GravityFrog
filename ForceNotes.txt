*****************************************************************

F_on_i = G * sum_j(m_i * m_j) * (ri - rj) / (ri-rj)^3
(ri - rj)^2 = (ri_x - rj_x)^2 + (ri_y - rj_y)^2 + (ri_z - rj_z)^2
5 adds, 3 multiplies, 6 lookups

(ri - rj)^2 = ri^2 + rj^2 - 2 * ri.rj
6 multiplies, 4 adds, 6 lookups, + 2 more that are potentially cache-able.

Is rij^2 cacheable?

(ri+dri - rj+drj) = ri-rj + dri-drj
mj*G*(ri-rj)/(ri-rj)^3


Pair indexing scheme into 1d array:
for (i=0, index=0;i<N;i++, index++)
	for(j=0;j<i;j++, index++)
		pairArray[index]
		index(i,j) = i(i-1)/2 + j; for j < i.
Easy to append to, equally easy to remove last element.  Difficult to insert or delete from arbitrary location.
Easy to build.  If it's not traversed, but consulted, then deletion and insertion aren't really a problem.
So, magnitudes of forces and distances may be profitable to cache in a structure like this.
Previous distance value is a very cheap (order of magnitude) guess for current distance.

*****************************************************************

In COM coords,
(m1+m2)x_com = m1*x1 + m2*x2
F12 = mu*a12
Gm1m2 / (r12)^2 = (m1m2) / (m1 + m2) a12
G(m1+m2) / (r12)^2 = a12
a1 = m2/(m1+m2)* G(m1+m2) / (r12)^2

a12 = a of 1 due to 2
F12 = -F21 (Newton's 3rd)
m1*a12 = - m2*a21
a21 = -(m1/m2)*a12
*****************************************************************
Binning 3d Space:

Data structure options:
Octree


Tesselation options:

Cube has:
Easy membership conditions
6 face neighbors, 12 edge neighbors, and 8 vertex neighbors.

Tetrahedron has:
membership conditions that I haven't worked out.
4 face neighbors, 6 edge neighbors, 4 vertex neighbors


Octahedron
membership conditions that I haven't worked out.
8 face neighbors, 12 edge neighbors, 6 vertex neighbors.


*****************************************************************
right shift of 64-bit float represented as 2 adjacent 32 bit integers.

hi = MSbits, lo = LSbits
hiNew = rightshift "hi"
loNew = rightshift "lo" + LSB of hi as MSB of lo

LSB of hi as MSB of lo:
  leftshift "hi" 31 times



lo >>>= 1;
lo |= (hi << 31)
hi >>>= 1






Guess sqrt(1+x)  = 1+x/2 = (2+x)/2
x_i+1 = ((2+x)/2 + (1+x)*2/(2+x))/2
x_i+1 = ((x+2)^2 + 4(1+x))/(4(x+2))
(x^2 +8x +8)/(4x+8)
(2+2x) / (2+x)

x^2 = n^2/(2^bits)^2

Could rshift by floor[bits/2], square, rshift by ceil[bits/2]
20 bits in a 32 bit integer...
shift 4, square, shift 16


Number = 2^{0,1}(1+x)
Sqrt(Number)
Rshift of Number yields:
Or, 2^(b)(1+x)
0: 1 + x/2
1: 1 + (b+x)/2
Right shift gives:
1+(b+x)/2
2nd order correction is:
-(b-x)^2 * f

So, this guess is:
2^0 * (1 + (b+x)/2 - (b-x)^2*f)

 = 1 + (b+x)/2 - (b^2 -2*b*x + x^2)*f
 = 1 + (b+x)/2 - (b^2 -2bx +x^2)f
 = 1 + (b+x)/2 - (b XOR x)^2 * f
 = Rshift(Number) - (b XOR x)^2 * f
Integer math might be faster....
b*(2^bits) - x
b*(2^bits) = (1 << (bits+1)) & Number
So, b-x = ((1 << (bits+1)) & Number) - x
x is (2^bits -1) & Number

b=0: 1 + x/2 - x^2(f)
Compare to expansion:
1 + x/2 - x^2/8


The integer portion of the rightshift is just
(b+x)/2 * (2^bits)

A slightly better guess is to replace  b-x with
b XOR x for every bit in x.

In any case, b XOR x ~= (b-x)

LSF for b = 0:
sqrt(Number) ~= Rshift(Number) - (0.2818x^2 + 0.0355x - 0.0013)
For 64 bit floats I've been working with:
1.0 = 0x3fff00000 (hi), 0x00000000 (lo)

= 2^(exp_biased - 0x3ff)*(1 + 20 bits + 32 bits (lo))
= 2^(exp_biased - 0x3ff)*(1 + sum(2^n b_n, n=0..51)/2^52)

Bitmask for biased exponent is:
0xfff00000(hi)
Bitmask for LSb of exponent is:
0x00100000(hi)
oddpowertwo = (0x00100000 & (0xexp00000(hi) - 0x3ff00000))
oddpowertwo = (0x00100000 & ~0xexp00000(hi))
yields 0x00100000 if odd power of two, 0 otherwise.
Maybe I can directly construct the multiplier...

Very good approx:
Max(0.2792684502 x^2 + 0.0370592915 x - 0.0015009213, 0)
Or: 0.2994174653 x^2 + 0.0250131236 x, if Max is too expensive

Later, need operation:
if oddpowertwo = 0x00100000, (2^20) multiply float result by sqrt(2), otherwise do not.  (Or multiply by 1)
For cases when exp_unbiased = exp-0x3ff is even:

result(hi) = (Number(hi)>>>1) + 0x1ff80000 //(UInt rep of 1.0)/2
result(lo) = (Number(hi)>>>4) & 0x0000ffff //(16 MSbits of mantissa)

results(hi) = (1+x/2) Float64(hi) (12 bit exp, 20 bit mantissa)
results(lo) = x * 2^16 (Uint 32)

results(lo) *= results(lo) ==>x^2 2^32
results(lo) >>>=16         ==>x^2 2^16
results(lo) *= (1.5-sqrt(2)) * 2^16 ==> (1.5-sqrt(2))x^2 *2^32



|        Float64Array           |
| Uint32Array[1]| Uint32Array[0]|
|   result(hi)  |   result(lo)  |
| B | B | B | B | B | B | B | B |
| 12b |   20b   |  16b  |  16b  |
|exp/2|   x/2   |     f x^2     |


What if I did result(hi) = (Number(hi) >>> 1) >>> 4
|       | Uint32Arr[0.5]|       |
| B | B | B | B | B | B | B | B |
| Uint32Array[1]| Uint32Array[0]|
| exp/2 |   x/2 |     f x^2     |

Could try:

Uint16[3], Uint16[2], Uint16[1], Uint16[0]
Uint32[0.75] = (Number32[1]>>>1) >>> 4;

Source:
| B | B | B | B | B | B | B | B | B | B | B | B | B | B | B | B |
| Uint32Array[1]| Uint32Array[0]| Uint32Array[1]| Uint32Array[0]|
| exp |           x             | exp |           x             |


result32[0.75] = Number32[1]>>>5 + 0x1ff80000>>>4

Result:
| B | B | B | B | B | B | B | B | B | B | B | B | B | B | B | B |
| Uint32Array[1]| Uint32Array[0]| Uint32Array[1]| Uint32Array[0]|
|   | exp/2 |  x/2  |           |   |                           |

*****************************************************************

result32[1] = Number32[1]>>>1 + 0x1ff80000
result32[0] = 0x0000ffff & (Number32[1])>>4

Result:
| B | B | B | B | B | B | B | B | B | B | B | B | B | B | B | B |
| Uint32Array[1]| Uint32Array[0]| Uint32Array[1]| Uint32Array[0]|
|exp/2| (b+x)/2 |   0   |   x   |
 (b = exp % 2)

result32[0] *= result32[0]

Result:
| B | B | B | B | B | B | B | B | B | B | B | B | B | B | B | B |
| Uint32Array[1]| Uint32Array[0]| Uint32Array[1]| Uint32Array[0]|
|exp/2| (b+x)/2 |      x^2      |

result32[0] >>>= 16
result32[0] *= 5622 (= f * 2^16)

Result:
| B | B | B | B | B | B | B | B | B | B | B | B | B | B | B | B |
| Uint32Array[1]| Uint32Array[0]| Uint32Array[1]| Uint32Array[0]|
|exp/2| (b+x)/2 |     fx^2      |

result32[0] >>>=12
result32[1] -= result32[0]

Result:
| B | B | B | B | B | B | B | B | B | B | B | B | B | B | B | B |
| Uint32Array[1]| Uint32Array[0]| Uint32Array[1]| Uint32Array[0]|
|exp/2| frac_2nd|  0  |   fx^2  |
 (frac_2nd = sqrt(1+x) to 2nd order fractional peice)


result64f = (result64f + Num64f/result64f)/2



*****************************************************************

result32[1] = Number32[1]>>>1 + 0x1ff80000
resultf32[0] = (Number64f - 1)

Result:
| B | B | B | B | B | B | B | B | B | B | B | B | B | B | B | B |
| Uint32Array[1]| Float32Arr[0] | Uint32Array[1]| Uint32Array[0]|
|exp/2| (b+x)/2 |      x        |
 (b = exp % 2)

resultf32[0] *= resultf32[0]*f;
Result:
| B | B | B | B | B | B | B | B | B | B | B | B | B | B | B | B |
| Uint32Array[1]| Float32Arr[0] | Uint32Array[1]| Uint32Array[0]|
|exp/2| (b+x)/2 |      fx^2     |


result64f[0] = result64f[0] - result32f[0]

result64f = (result64f + Num64f/result64f)/2


****************************************************************
Float 32 <---> Float 64
(1+7 bits), (24 bits) <---> (1+11 bits), (20bits, 32bits)
(exp+63? 127?)
(exp+127),(1+x/2^24)
(exp32-0x3f800000) >> 24 = (exp64-0x3ff00000) >> 20

*****************************************************************

result32f[1] = Number64f
result32[1] = (result32>>>1)+ 0x1fc00000

resultf32[0] = (Number64f - 1)

Result:
| B | B | B | B | B | B | B | B |
| Uint32Array[1]| Float32Arr[0] |
|e/2|  (b+x)/2  |       x       |
 (b = exp % 2)

resultf32[0] *= resultf32[0]*f;

Result:
| B | B | B | B | B | B | B | B |
| Float32Arr[1] | Float32Arr[0] |
|  1 + (b+x)/2  |      fx^2     |


result32f[1] -= result32f[0]
result32f[0] = Number64f

result32f[1] += result32f[0]/result32f[1]
result32[1]  -= 0x00800000

result64f = (result32f[1] + Num64f/result32f[1])/2

This works for values 1.0, 1.9

****************************************************************






****************************************************************

result32[0] = Number32[0.75]

result32[-0.25] = Number32[0.25] << 1

Result:
| B | B | B | B | B | B | B | B | B | B | B | B | B | B | B | B |
| Uint32Array[1]| Uint32Array[0]| Uint32Array[1]| Uint32Array[0]|
|   | exp/2 |         x/2          0|                           |








f   = (1+x)^(1/2)       = (1+x)^(1/2)
f'  = (1/2)(1+x)^(-1/2) = (1/2)/f
f'' =-(1/4)(1+x)^(-3/2) =-(1/4)/f^3
f'''= (3/8)(1+x)^(-5/2) = (3/8)/f^5
f iv=-(15/16)(1+x)^(-7/2)= -15/16 / f^7
...

Taylor about x = 0
f(x0) = 1
f(x) = 1 + x/2 -x^2/8 +(1/12)x^3

Taylor about x = 1/2
f   = sqrt(3/2) + (1/2)sqrt(2/3)(x-1/2) -(1/4)(3/2)^(-3/2)(x-1/2)^2

What if I choose x_0 = sqrt(2) - 1

f(x) =


How about x_0 = (289/256)^2 - 1
1+x - (x_0) = 2+x-(289/256)^2 = (47551)/(256^2) + x



How about x_0 = (300/256)^2-1 ==> (1 + x_0)^(1/2) = 300/256
x - x0 = x+1-(300/256)^2 = x - 24464/(256^2)
f(x0) = 300/256
f = 1 + (44/256) + (1/2)(256/300)(x-24464/256^2) -(1/8)(256/300)^3(x-24464/256^2)^2




sqrt[1+x]  = 1 + x/2 - x^2/8 + x^3/16 - 5x^4/128 + ...

sqrt[1-x]  = 1 - x/2 - x^2/8 - x^3/16 - 5x^4/128 + ...

sqrt[1-x^2]= 1 - x^2/2 - x^4/8 - x^6/16 - 5x^8/128 + ...

sqrt[1+x ] = sqrt[1-x^2]/sqrt[1-x]
 = (1 - x/2 + ...) / (1-x^2/2 + ...)


1+x/2 -x^2/8 +x^3/16
1+x/2 - (x^2/4)(1-x/2)



sqrt(1+x)(@x=1) = sqrt(2) ~= 1.414
(1+x/2)(@x=1)   = 1.5



32bit float:

Original 64bit float:
| B | B | B | B | B | B | B | B |
| exp |           x             |


float32[0] = float64
float32[1] = float64
After 32bit casting to float32[0]:
Result:
| B | B | B | B | B | B | B | B |
| Float32Arr[1] | Float32Arr[0] |
|sexp|    x     |sexp|    x     |

uint32[0] >>> = 7

Result:
| B | B | B | B | B | B | B | B |
| Float32Arr[1] | Float32Arr[0] |
|sexp|     x    |  sexp |   x   |


uint32[0] = uint16[0]*uint16[0]

Result:
| B | B | B | B | B | B | B | B |
| Float32Arr[1] |  Uint32Arr[0] |
|sexp|     x    |      x^2      |

For f = (1.5 - sqrt(2)) ~= 5622 / 2^16

uint32[0] = uint16[1] * f * 2^16
          = uint16[1] * 5622
Result:
| B | B | B | B | B | B | B | B |
| Float32Arr[1] |  Uint32Arr[0] |
|sexp|     x    |     fx^2      |


uint32[0] >>>= 8
Result:
| B | B | B | B | B | B | B | B |
| Float32Arr[1] |  Uint32Arr[0] |
|sexp|     x    | 0  |  2fx^2   |


uint32[0] -= uint32[1]


Result:
| B | B | B | B | B | B | B | B |
| Float32Arr[1] |  Uint32Arr[0] |
|sexp|     x    |sexp| x - 2fx^2|

uint32[1] = (uint32[1] & 0x00ffffff) ^ 0x00800000

| B | B | B | B | B | B | B | B |
| Float32Arr[1] |  Uint32Arr[0] |
|   b|     x    |sexp| x - 2fx^2|
b == 1 if unbiased exponent is odd.


uint32[0] >>>= 1
uint32[0] += 0x1fc00000
uint32[0] &= ~(1 >> 23)

Result:
| B | B | B | B | B | B | B | B |
| Float32Arr[1] |  Uint32Arr[0] |
|   b|     x    |sexp/2|x/2 -fx^2|





32 bit float Sqrt(2) = 0x3fb504f3







Highest byte:
b7, b6, b5, b4, b3, b2, b1, b0
b0, b6, b5, b4, b3, b2, b1, 0

uint8[7] = (uint8[7] << 7) | (01111110 & uint8[7])

Result:
| B | B | B | B | B | B | B | B |
| Float32Arr[1] |  Uint32Arr[0] |
|bex|     x     | 0 |   fx^2    |

uint32[1] >>>= 1
uint32[1] += (32bitbias) / 2

Result:
| B   | B | B | B | B | B | B | B |
|   Float32Arr[1] |  Uint32Arr[0] |
|bex/2|    x/2    | 0 |   fx^2    |


uint32[1] -= uint32[0]

Result:
| B   | B | B | B | B | B | B | B |
|   Float32Arr[1] |  Uint32Arr[0] |
|bex/2| x/2-fx^2  | 0 |   fx^2    |

32bit sqrt (2)




POINT A:

Result:
| B | B | B | B | B | B | B | B |
| Float32Arr[1] |  Uint32Arr[0] |
|exp|     x     |      x^2      |

For f = (1.5 - sqrt(2)) ~= 5622 / 2^16

xMax = (2^24-1)/2^24

xMax^2 / 2^32 =


Point B:
Result:
| B | B | B | B | B | B | B | B |
| Float32Arr[1] |  Uint32Arr[0] |
|exp|     x     |     fx^2      |

uint32[0] >>>=7

Result:
| B | B | B | B | B | B | B | B |
| Float32Arr[1] |  Uint32Arr[0] |
|exp|     x     | 0 |   2fx^2   |


uint32[0] = uint32[1] - uint32[0]

Result:
| B | B | B | B | B | B | B | B |
| Float32Arr[1] |  Uint32Arr[0] |
|exp|     x     |exp| x-2fx^2   |


uint8[3] &= ~1 (makes exp even)
uint32[0] >>>= 1
uint32[0] += 32bitbias/2

guess_next = (guess^2 + t^2)/2guess

For t^2 from 1. to 2.
1+x_next = (1+x_i + t^2 / (1+x_i)) / 2

1 + x_next = ((1+x_i)^2 + 1+t_x) / 2(1+x_i)
1 + x_next = (2 + 2x_i + t_x + x_i^2) / 2(1+x_i)
x_next = (t_x + x_i^2) / (2+2x_i)
x = t_x/2 ?
x_next = t_x(1+tx/4)/(2+tx) = (t_x/2)*(4+tx)/(4+2tx)
x_next = tx/2 (1 -tx/(4+2tx))
x_next = tx/2 (1 -(tx/2)/(1+(tx/2))/2)
x_next = x(1 - x / (2+2x))
 = x(2+x)/(2+2x)
 = (x^2 + 2x)/(2x+2)
t_x = 0 --> x_next = 0
t_x = 1 --> x_next = 1/2 - (1/4)^2/(3/2)/2 = 5/12

For t^2 = 2^(2n+b)(1+t_x)
1st guess = 2^(n)2^(b/2)(1+t_x/2)
(2^n)2^(b/2)(1+x_n) = (2^(2n+b)(1 + 2x + x^2) + 2^(2n+b)(1+t_x))/(2 * (2^n)2^(b/2)(1+x)
(1+x_n) = (2 + 2x + x^2 +tx)/(2(1+x))
x_n = (x^2+tx)/(2+2x)


For t^2 from 2. to 4.
1 + x_next = ((1+x)^2 + 2(1+t_x)) / 2(1+x)
1 + x_next = (1 + 2x + x^2 + 2 +2t_x) / 2(1+x)
x_next = (1 + x^2 + 2tx) / (2+2x)
if x = (tx+1)/2 ==> tx = 2x-1
x_next = 1 + x^2 + 2(2x-1)
x_next = (-1 + x^2 + 4x) / (2+2x)
x_next = (x^2 + 4x - 1) / (2+2x)
         (x^2 + 2x)/(2x+2) + (2x-1) / (2x+2)


x_next = (x^2 + 2x)/(2x+2) + (b)(2x-1)/(2x+2)
       = (x^2 + 2x)/(2x+2) + b tx / (tx+3)

x = (b+tx)/2



(1 -x +x^2 -x^3 +x^4 + ...) * (1+x) = 1


